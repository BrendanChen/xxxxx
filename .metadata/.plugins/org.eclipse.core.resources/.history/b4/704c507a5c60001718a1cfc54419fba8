package com.spring.config;

package main.java.com.spring.config;


import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScans;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.Database;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;


@EnableWebMvc // <mvc:annotation-driven />
@Configuration
@EnableTransactionManagement
@ComponentScans(value = { @ComponentScan("main.java.com.spring.dao"), @ComponentScan("main.java.com.spring.service"),
		@ComponentScan("main.java.com.spring.config") })
public class SpringRootConfig extends WebMvcConfigurerAdapter{

	// @Autowired
	// private Environment environment;
	//
	// @Bean
	// public LocalSessionFactoryBean sessionFactory() {
	// LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
	// sessionFactory.setDataSource(dataSource());
	// sessionFactory.setPackagesToScan(new String[] {
	// "com.websystique.springmvc.model" });
	// sessionFactory.setHibernateProperties(hibernateProperties());
	// return sessionFactory;
	// }
	//
	// @Bean
	// public DataSource dataSource() {
	// DriverManagerDataSource dataSource = new DriverManagerDataSource();
	// dataSource.setDriverClassName(environment.getRequiredProperty("jdbc.driverClassName"));
	// dataSource.setUrl(environment.getRequiredProperty("jdbc.url"));
	// dataSource.setUsername(environment.getRequiredProperty("jdbc.username"));
	// dataSource.setPassword(environment.getRequiredProperty("jdbc.password"));
	// return dataSource;
	// }
	//
	// private Properties hibernateProperties() {
	// Properties properties = new Properties();
	// properties.put("hibernate.dialect",
	// environment.getRequiredProperty("hibernate.dialect"));
	// properties.put("hibernate.show_sql",
	// environment.getRequiredProperty("hibernate.show_sql"));
	// properties.put("hibernate.format_sql",
	// environment.getRequiredProperty("hibernate.format_sql"));
	// return properties;
	// }
	//
	// @Bean
	// @Autowired
	// public HibernateTransactionManager transactionManager(SessionFactory s) {
	// HibernateTransactionManager txManager = new
	// HibernateTransactionManager();
	// txManager.setSessionFactory(s);
	// return txManager;
	// }

	@Bean
	public DataSource dataSource() {
		BasicDataSource ds = new BasicDataSource();
		ds.setDriverClassName("oracle.jdbc.OracleDriver");
		ds.setUrl("jdbc:oracle:thin:@localhost:1521:XE");
		ds.setUsername("Brendan");
		ds.setPassword("j0o0h0n0");
		//ds.setMaxActive(10);
		return ds;
	}

	@Bean
	public JpaVendorAdapter jpaVendorAdapter() {
		HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();

		adapter.setDatabase(Database.ORACLE);
		adapter.setShowSql(true);
		adapter.setGenerateDdl(false);
		adapter.setDatabasePlatform("org.hibernate.dialect.Oracle10gDialect");
		return adapter;
	}

	@Bean
	public PlatformTransactionManager jpaTransactionManager() {
		JpaTransactionManager tm = new JpaTransactionManager();
		tm.setEntityManagerFactory(this.entityManagerFactory().getObject());
		return tm;
	}

	@Bean
	public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
		LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
		emf.setDataSource(this.dataSource());
		emf.setPackagesToScan(
				new String[] { "main.java.com.spring.dao", "main.java.com.spring.entity" });
		emf.setJpaVendorAdapter(this.jpaVendorAdapter());

		return emf;
	}
}
